{% schema %}
{
  "name": "Carosello Immagini",
  "tag": "section",
  "settings": [
    {
      "type": "color_scheme",
      "id": "color_scheme",
      "default": "scheme-1",
      "label": "Schema colori"
    },
    {
      "type": "text",
      "id": "section_heading",
      "label": "Titolo sezione",
      "default": "Carosello immagini"
    }
  ],
  "blocks": [
    {
      "type": "image",
      "name": "Immagine",
      "settings": [
        {
          "type": "image_picker",
          "id": "image",
          "label": "Immagine"
        },
        {
          "type": "text",
          "id": "alt_text",
          "label": "Testo alternativo",
          "default": "Immagine carosello"
        }
      ]
    }
  ],
  "presets": [
    {
      "name": "Carosello Immagini Quadrate",
      "category": "Media"
    }
  ]
}
{% endschema %}

<section class="carousel-section color-{{ section.settings.color_scheme }}">
  <div class="carousel-heading">{{ section.settings.section_heading }}</div>
  <div class="carousel" tabindex="0">
    <div class="carousel-track">
      {% for block in section.blocks %}
        <div class="carousel-slide">
          {% if block.settings.image != blank %}
            <img 
              src="{{ block.settings.image | image_url: width: 800 }}"
              alt="{{ block.settings.alt_text }}"
              loading="lazy" />
          {% endif %}
        </div>
      {% endfor %}
    </div>
    <button class="carousel-button left" aria-label="Indietro">&#10094;</button>
    <button class="carousel-button right" aria-label="Avanti">&#10095;</button>
    <div class="carousel-indicators"></div>
  </div>
</section>

<style>
.carousel-section {
  padding: 2rem 1rem;
}
.carousel-heading {
  font-family: var(--font-heading-family);
  font-size: calc(var(--font-heading-scale) * 1.5rem);
  color: var(--color-foreground);
  text-align: center;
  margin-bottom: 1rem;
}
.carousel {
  position: relative;
  max-width: 600px;
  margin: auto;
  overflow: hidden;
}
.carousel-track {
  display: flex;
  transition: transform 0.5s ease-in-out;
  will-change: transform;
}
.carousel-slide {
  min-width: 100%;
  aspect-ratio: 1 / 1;
  overflow: hidden;
}
.carousel-slide img {
  width: 100%;
  height: 100%;
  object-fit: contain;
  transition: transform 0.5s ease;
  background-color: #fff; /* o trasparente o un colore coerente col design */
}

.carousel-slide:hover img {
  transform: scale(1.1);
}
.carousel-button {
  position: absolute;
  top: 50%;
  transform: translateY(-50%);
  font-size: 2rem;
  background: rgba(0,0,0,0.5);
  color: white;
  border: none;
  padding: 0.5rem 1rem;
  cursor: pointer;
  z-index: 10;
    border-radius: var(--buttons-radius);

}
.carousel-button.left { left: 10px; }
.carousel-button.right { right: 10px; }
.carousel-indicators {
  text-align: center;
  position: absolute;
  bottom: 10px;
  left: 50%;
  transform: translateX(-50%);
}
.carousel-indicators button {
  height: 12px;
  width: 12px;
  margin: 0 4px;
  background-color: #bbb;
  border: none;
  border-radius: 50%;
  display: inline-block;
  cursor: pointer;
}
.carousel-indicators button.active {
  background-color: #333;
}
</style>

<script>
document.addEventListener('DOMContentLoaded', function () {
  const carousel = document.querySelector('.carousel');
  const track = carousel.querySelector('.carousel-track');
  const slides = Array.from(track.children);
  const nextBtn = carousel.querySelector('.carousel-button.right');
  const prevBtn = carousel.querySelector('.carousel-button.left');
  const indicators = carousel.querySelector('.carousel-indicators');
  let currentSlide = 0;
  let autoplay = true;
  let timer;

  // Indicatori dinamici
  slides.forEach((_, i) => {
    const btn = document.createElement('button');
    if (i === 0) btn.classList.add('active');
    indicators.appendChild(btn);
  });

  const updateSlide = (index) => {
    currentSlide = (index + slides.length) % slides.length;
    const offset = -currentSlide * 100;
    track.style.transform = `translateX(${offset}%)`;
    [...indicators.children].forEach((btn, i) =>
      btn.classList.toggle('active', i === currentSlide)
    );
  };

  const nextSlide = () => updateSlide(currentSlide + 1);
  const prevSlide = () => updateSlide(currentSlide - 1);
  const startAutoplay = () => { timer = setInterval(() => { if (autoplay) nextSlide(); }, 4000); };
  const stopAutoplay = () => clearInterval(timer);
  const resetAutoplay = () => { stopAutoplay(); startAutoplay(); };

  nextBtn.addEventListener('click', () => { nextSlide(); resetAutoplay(); });
  prevBtn.addEventListener('click', () => { prevSlide(); resetAutoplay(); });

  indicators.addEventListener('click', e => {
    if (e.target.tagName === 'BUTTON') {
      const index = [...indicators.children].indexOf(e.target);
      updateSlide(index);
      resetAutoplay();
    }
  });

  carousel.addEventListener('mouseenter', () => autoplay = false);
  carousel.addEventListener('mouseleave', () => autoplay = true);
  carousel.addEventListener('keydown', e => {
    if (e.key === 'ArrowRight') { nextSlide(); resetAutoplay(); }
    if (e.key === 'ArrowLeft') { prevSlide(); resetAutoplay(); }
    if (e.key === ' ') { autoplay = !autoplay; e.preventDefault(); }
  });

  let startX = 0;
  carousel.addEventListener('touchstart', e => startX = e.touches[0].clientX);
  carousel.addEventListener('touchend', e => {
    const endX = e.changedTouches[0].clientX;
    const diff = endX - startX;
    if (diff > 50) { prevSlide(); resetAutoplay(); }
    if (diff < -50) { nextSlide(); resetAutoplay(); }
  });

  startAutoplay();
});
</script>
